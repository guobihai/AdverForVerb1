package vb.queue.com.adverforverb.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import vb.queue.com.adverforverb.entry.OrderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_INFO".
*/
public class OrderInfoDao extends AbstractDao<OrderInfo, Long> {

    public static final String TABLENAME = "ORDER_INFO";

    /**
     * Properties of entity OrderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property FullTime = new Property(2, String.class, "fullTime", false, "FULL_TIME");
        public final static Property RoomName = new Property(3, String.class, "roomName", false, "ROOM_NAME");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property OrderNo = new Property(6, int.class, "orderNo", false, "ORDER_NO");
        public final static Property ShowOrderNo = new Property(7, int.class, "showOrderNo", false, "SHOW_ORDER_NO");
        public final static Property SetOrderNo = new Property(8, int.class, "setOrderNo", false, "SET_ORDER_NO");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
    }


    public OrderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public OrderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"TIME\" TEXT," + // 1: time
                "\"FULL_TIME\" TEXT," + // 2: fullTime
                "\"ROOM_NAME\" TEXT," + // 3: roomName
                "\"NAME\" TEXT," + // 4: name
                "\"CONTENT\" TEXT," + // 5: content
                "\"ORDER_NO\" INTEGER NOT NULL ," + // 6: orderNo
                "\"SHOW_ORDER_NO\" INTEGER NOT NULL ," + // 7: showOrderNo
                "\"SET_ORDER_NO\" INTEGER NOT NULL ," + // 8: setOrderNo
                "\"TYPE\" INTEGER NOT NULL );"); // 9: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderInfo entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String fullTime = entity.getFullTime();
        if (fullTime != null) {
            stmt.bindString(3, fullTime);
        }
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(4, roomName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getOrderNo());
        stmt.bindLong(8, entity.getShowOrderNo());
        stmt.bindLong(9, entity.getSetOrderNo());
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderInfo entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String fullTime = entity.getFullTime();
        if (fullTime != null) {
            stmt.bindString(3, fullTime);
        }
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(4, roomName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
        stmt.bindLong(7, entity.getOrderNo());
        stmt.bindLong(8, entity.getShowOrderNo());
        stmt.bindLong(9, entity.getSetOrderNo());
        stmt.bindLong(10, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderInfo readEntity(Cursor cursor, int offset) {
        OrderInfo entity = new OrderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fullTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // roomName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.getInt(offset + 6), // orderNo
            cursor.getInt(offset + 7), // showOrderNo
            cursor.getInt(offset + 8), // setOrderNo
            cursor.getInt(offset + 9) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderInfo entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFullTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoomName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderNo(cursor.getInt(offset + 6));
        entity.setShowOrderNo(cursor.getInt(offset + 7));
        entity.setSetOrderNo(cursor.getInt(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderInfo entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderInfo entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderInfo entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
